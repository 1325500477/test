<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Obj\EMP6910.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Obj\EMP6910.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Jun 24 11:12:45 2019
<BR><P>
<H3>Maximum Stack Usage =        180 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ProcessCmd &rArr; ProcessSystemCmd &rArr;  ProcessSystemCmd (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[bf]">ProcessSystemCmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bf]">ProcessSystemCmd</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from hardware.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from hardware.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stepmotor.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stepmotor.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from serial.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from serial.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from stm32f10x_it.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4a]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[49]">fputc</a> from serial.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[53]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[141]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[142]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[143]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[144]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[145]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[146]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[147]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[148]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[81]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToAddress
</UL>

<P><STRONG><a name="[149]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[14a]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_send_msg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_winpcap
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_udp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_tcp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_mcu_data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameter
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_cmd_execution
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DistrubDataToGroup
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackageMsg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToAddress
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_message
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_firmware
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[14f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[150]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[151]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__decompress2</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BusFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>CheckOpTimeDelay</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, opctrl.o(i.CheckOpTimeDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmRise
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmDown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmCoolMakeCard
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SendCardToPretargeting
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampOpen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampClose
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ReturnCard
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingToAccessory
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresRise
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresDown
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampOpen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampClose
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CuttingPlatformWork
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolRise
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolDown
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_AutoMakeCard
</UL>

<P><STRONG><a name="[f8]"></a>CheckPackageValid</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, communicate.o(i.CheckPackageValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckPackageValid
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_cmd_execution
</UL>

<P><STRONG><a name="[7b]"></a>Configure_DMA</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardware.o(i.Configure_DMA))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[55]"></a>Configure_EXTI</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hardware.o(i.Configure_EXTI))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Configure_EXTI &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[5a]"></a>Configure_FSMC</STRONG> (Thumb, 368 bytes, Stack size 96 bytes, bspconfig.o(i.Configure_FSMC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Configure_FSMC &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBspConfig
</UL>

<P><STRONG><a name="[5f]"></a>Configure_IO</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bspconfig.o(i.Configure_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Configure_IO &rArr; Configure_StepMotor &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_StepMotor
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBspConfig
</UL>

<P><STRONG><a name="[62]"></a>Configure_NVIC</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hardware.o(i.Configure_NVIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Configure_NVIC
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
</UL>

<P><STRONG><a name="[60]"></a>Configure_Output</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, bspconfig.o(i.Configure_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Configure_Output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_IO
</UL>

<P><STRONG><a name="[64]"></a>Configure_RCC</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bspconfig.o(i.Configure_RCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Configure_RCC
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBspConfig
</UL>

<P><STRONG><a name="[61]"></a>Configure_StepMotor</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, bspconfig.o(i.Configure_StepMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Configure_StepMotor &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_IO
</UL>

<P><STRONG><a name="[79]"></a>Configure_SystemTick</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, bspconfig.o(i.Configure_SystemTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Configure_SystemTick
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBspConfig
</UL>

<P><STRONG><a name="[11f]"></a>DBGMCU_Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dbgmcu.o(i.DBGMCU_Config))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DealResult</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, opctrl.o(i.DealResult))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageReset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageDown
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmRise
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmDown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmCoolMakeCard
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckVacuumCupOpen
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckVacuumCupClose
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckMove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckCardCarMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SendCardToPretargeting
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ScramProcess
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampOpen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampClose
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ReturnCard
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuck
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetModule
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClamp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetBlankCardBox
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingVacuumCupOpen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingVacuumCupClose
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingUp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingToAccessory
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingReset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresRise
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresDown
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_OpeningPressure
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_OpenGasSwitch
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampOpen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampClose
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_GotoLoadingPlatform
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CuttingPlatformWork
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolRise
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolDown
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClosingPressure
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CloseGasSwitch
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampOpen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampClose
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampCardCarMove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_BlankCardBoxUp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_AutoMakeCard
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DefaultParameter</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, parameter.o(i.DefaultParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DefaultParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUpdateParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameter
</UL>

<P><STRONG><a name="[6a]"></a>DistrubDataToGroup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, communicate.o(i.DistrubDataToGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DistrubDataToGroup
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_cmd_execution
</UL>

<P><STRONG><a name="[6f]"></a>EE_Init</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, eeprom.o(i.EE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EE_Init &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameter
</UL>

<P><STRONG><a name="[70]"></a>EE_ReadVariable</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, eeprom.o(i.EE_ReadVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EE_ReadVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameter
</UL>

<P><STRONG><a name="[74]"></a>EE_WriteVariable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eeprom.o(i.EE_WriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_parameter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameter
</UL>

<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hardware.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hardware.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_EXTI
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_EXTI
</UL>

<P><STRONG><a name="[6d]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>

<P><STRONG><a name="[77]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[83]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToApp
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_parameter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameter
</UL>

<P><STRONG><a name="[6e]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format
</UL>

<P><STRONG><a name="[11d]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_parameter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameter
</UL>

<P><STRONG><a name="[76]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[5e]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_FSMC
</UL>

<P><STRONG><a name="[5d]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_FSMC
</UL>

<P><STRONG><a name="[57]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_EXTI
</UL>

<P><STRONG><a name="[5c]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_StepMotor
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_Output
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_FSMC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_board_id
</UL>

<P><STRONG><a name="[118]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_board_id
</UL>

<P><STRONG><a name="[119]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_board_id
</UL>

<P><STRONG><a name="[109]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[c6]"></a>Get_Default_Value</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eeprom_par.o(i.Get_Default_Value))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>InitBspConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bspconfig.o(i.InitBspConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = InitBspConfig &rArr; Configure_FSMC &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_SystemTick
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RCC
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_IO
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_FSMC
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>InitHardware</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hardware.o(i.InitHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InitHardware &rArr; Configure_EXTI &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_NVIC
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_EXTI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>InitOpStruct</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, opctrl.o(i.InitOpStruct))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAllSignal
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMachine
</UL>

<P><STRONG><a name="[7c]"></a>InitializeMachine</STRONG> (Thumb, 800 bytes, Stack size 8 bytes, process.o(i.InitializeMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitializeMachine
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOpStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>IsChildOpOK</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, opctrl.o(i.IsChildOpOK))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageDown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmCoolMakeCard
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckMove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckCardCarMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SendCardToPretargeting
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ScramProcess
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ReturnCard
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetModule
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClamp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingUp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingToAccessory
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_GotoLoadingPlatform
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CuttingPlatformWork
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampOpen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampClose
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampCardCarMove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_BlankCardBoxUp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_AutoMakeCard
</UL>

<P><STRONG><a name="[91]"></a>IsSmRunFinish</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stepmotor.o(i.IsSmRunFinish))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageReset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageDown
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckMove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckCardCarMove
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuck
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetBlankCardBox
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingUp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingReset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampCardCarMove
</UL>

<P><STRONG><a name="[7e]"></a>JumpToAddress</STRONG> (Thumb, 78 bytes, Stack size 88 bytes, bsp_command.o(i.JumpToAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = JumpToAddress &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootload
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToApp
</UL>

<P><STRONG><a name="[82]"></a>JumpToApp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_command.o(i.JumpToApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = JumpToApp &rArr; JumpToAddress &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToAddress
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserCmd
</UL>

<P><STRONG><a name="[84]"></a>JumpToBootload</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_command.o(i.JumpToBootload))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = JumpToBootload &rArr; JumpToAddress &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToAddress
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserCmd
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemManage_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[12a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[63]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_NVIC
</UL>

<P><STRONG><a name="[cb]"></a>OpUnplugOneStub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, opctrl.o(i.OpUnplugOneStub))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[85]"></a>Op_AutoMakeCard</STRONG> (Thumb, 948 bytes, Stack size 8 bytes, process.o(i.Op_AutoMakeCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Op_AutoMakeCard &rArr; CheckOpTimeDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[8b]"></a>Op_BlankCardBoxUp</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, process.o(i.Op_BlankCardBoxUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Op_BlankCardBoxUp &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[8f]"></a>Op_ClampCardCarMove</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, process.o(i.Op_ClampCardCarMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Op_ClampCardCarMove &rArr; sm_run_abs &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run_abs
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[92]"></a>Op_ClampClose</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, process.o(i.Op_ClampClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Op_ClampClose
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[93]"></a>Op_ClampOpen</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, process.o(i.Op_ClampOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Op_ClampOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[94]"></a>Op_CloseGasSwitch</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, process.o(i.Op_CloseGasSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_CloseGasSwitch &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[96]"></a>Op_ClosingPressure</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, process.o(i.Op_ClosingPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_ClosingPressure &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[97]"></a>Op_CoolDown</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, process.o(i.Op_CoolDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_CoolDown &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[98]"></a>Op_CoolRise</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, process.o(i.Op_CoolRise))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_CoolRise &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[99]"></a>Op_CuttingPlatformWork</STRONG> (Thumb, 664 bytes, Stack size 8 bytes, process.o(i.Op_CuttingPlatformWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Op_CuttingPlatformWork &rArr; CheckOpTimeDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[9a]"></a>Op_GotoLoadingPlatform</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, process.o(i.Op_GotoLoadingPlatform))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Op_GotoLoadingPlatform
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[9b]"></a>Op_LeftClampClose</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, process.o(i.Op_LeftClampClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_LeftClampClose &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[9c]"></a>Op_LeftClampOpen</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, process.o(i.Op_LeftClampOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_LeftClampOpen &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[9d]"></a>Op_OpenGasSwitch</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, process.o(i.Op_OpenGasSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_OpenGasSwitch &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[9e]"></a>Op_OpeningPressure</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, process.o(i.Op_OpeningPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_OpeningPressure &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[9f]"></a>Op_PresDown</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, process.o(i.Op_PresDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_PresDown &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[a0]"></a>Op_PresRise</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, process.o(i.Op_PresRise))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_PresRise &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[a1]"></a>Op_PretargetingReset</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, process.o(i.Op_PretargetingReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Op_PretargetingReset &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[a2]"></a>Op_PretargetingToAccessory</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, process.o(i.Op_PretargetingToAccessory))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Op_PretargetingToAccessory &rArr; sm_stop &rArr; sm_set_pul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[a3]"></a>Op_PretargetingUp</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, process.o(i.Op_PretargetingUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Op_PretargetingUp &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[a4]"></a>Op_PretargetingVacuumCupClose</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, process.o(i.Op_PretargetingVacuumCupClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_PretargetingVacuumCupClose &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[a5]"></a>Op_PretargetingVacuumCupOpen</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, process.o(i.Op_PretargetingVacuumCupOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_PretargetingVacuumCupOpen &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[a6]"></a>Op_ResetBlankCardBox</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, process.o(i.Op_ResetBlankCardBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Op_ResetBlankCardBox &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[a7]"></a>Op_ResetClamp</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, process.o(i.Op_ResetClamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Op_ResetClamp
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[a8]"></a>Op_ResetClampCardCar</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, process.o(i.Op_ResetClampCardCar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Op_ResetClampCardCar &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_abs_zero
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[aa]"></a>Op_ResetModule</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, process.o(i.Op_ResetModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Op_ResetModule
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[ab]"></a>Op_ResetSuck</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, process.o(i.Op_ResetSuck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Op_ResetSuck &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_abs_zero
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[ac]"></a>Op_ResetSuckCardCar</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, process.o(i.Op_ResetSuckCardCar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Op_ResetSuckCardCar &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_abs_zero
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[ad]"></a>Op_ReturnCard</STRONG> (Thumb, 464 bytes, Stack size 8 bytes, process.o(i.Op_ReturnCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Op_ReturnCard &rArr; sm_stop &rArr; sm_set_pul
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[ae]"></a>Op_RightClampClose</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, process.o(i.Op_RightClampClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_RightClampClose &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[af]"></a>Op_RightClampOpen</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, process.o(i.Op_RightClampOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_RightClampOpen &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[b0]"></a>Op_ScramProcess</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, process.o(i.Op_ScramProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Op_ScramProcess &rArr; sm_stop &rArr; sm_set_pul
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[b1]"></a>Op_SendCardToPretargeting</STRONG> (Thumb, 510 bytes, Stack size 8 bytes, process.o(i.Op_SendCardToPretargeting))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Op_SendCardToPretargeting &rArr; sm_stop &rArr; sm_set_pul
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[b2]"></a>Op_SuckCardCarMove</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, process.o(i.Op_SuckCardCarMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Op_SuckCardCarMove &rArr; sm_run_abs &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run_abs
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[b3]"></a>Op_SuckMove</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, process.o(i.Op_SuckMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Op_SuckMove &rArr; sm_run_abs &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run_abs
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[b4]"></a>Op_SuckVacuumCupClose</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, process.o(i.Op_SuckVacuumCupClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_SuckVacuumCupClose &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[b5]"></a>Op_SuckVacuumCupOpen</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, process.o(i.Op_SuckVacuumCupOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_SuckVacuumCupOpen &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[b6]"></a>Op_WarmCoolMakeCard</STRONG> (Thumb, 650 bytes, Stack size 8 bytes, process.o(i.Op_WarmCoolMakeCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Op_WarmCoolMakeCard &rArr; sm_stop &rArr; sm_set_pul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[b7]"></a>Op_WarmDown</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, process.o(i.Op_WarmDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_WarmDown &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[b8]"></a>Op_WarmRise</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, process.o(i.Op_WarmRise))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Op_WarmRise &rArr; dm_ctrl_one
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpTimeDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOpTimeDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[b9]"></a>Op_WasteStorageDown</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, process.o(i.Op_WasteStorageDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Op_WasteStorageDown &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartChildOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChildOpOK
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[ba]"></a>Op_WasteStorageReset</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, process.o(i.Op_WasteStorageReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Op_WasteStorageReset &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSmRunFinish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealResult
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
</UL>

<P><STRONG><a name="[66]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RCC
</UL>

<P><STRONG><a name="[bb]"></a>PackageMsg</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, communicate.o(i.PackageMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PackageMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_cmd_execution
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>ProcessCmd</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, communicate.o(i.ProcessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ProcessCmd &rArr; ProcessSystemCmd &rArr;  ProcessSystemCmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>ProcessSystemCmd</STRONG> (Thumb, 638 bytes, Stack size 16 bytes, bsp_command.o(i.ProcessSystemCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + In Cycle
<LI>Call Chain = ProcessSystemCmd &rArr;  ProcessSystemCmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_parameter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Default_Value
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Default_Value
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_step_motor
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_op_info
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_firmware
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_all_info
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOpByMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOpRunMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResumeOp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpUnplugOneStub
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd
</UL>

<P><STRONG><a name="[69]"></a>ProcessUpdateParameter</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, process.o(i.ProcessUpdateParameter))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultParameter
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_parameter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameter
</UL>

<P><STRONG><a name="[c0]"></a>ProcessUserCmd</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, command.o(i.ProcessUserCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ProcessUserCmd &rArr; JumpToBootload &rArr; JumpToAddress &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootload
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToApp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAllSignal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_mcu_data
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd
</UL>

<P><STRONG><a name="[5b]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_FSMC
</UL>

<P><STRONG><a name="[65]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RCC
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[e9]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[56]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RCC
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_FSMC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_EXTI
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_board_id
</UL>

<P><STRONG><a name="[e8]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[ef]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[67]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Configure_RCC
</UL>

<P><STRONG><a name="[cd]"></a>ResetAllSignal</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, process.o(i.ResetAllSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ResetAllSignal &rArr; sm_stop &rArr; sm_set_pul
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ctrl_one
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_enable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitOpStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserCmd
</UL>

<P><STRONG><a name="[c9]"></a>ResumeOp</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, opctrl.o(i.ResumeOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResumeOp
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[d0]"></a>SPI1_Init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, spi.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[d4]"></a>SPI1_ReadWrite</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi.o(i.SPI1_ReadWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
</UL>

<P><STRONG><a name="[d3]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[d5]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[d7]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[d6]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[d2]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>SetOpRunMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, opctrl.o(i.SetOpRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[88]"></a>SetOpTimeDelay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, opctrl.o(i.SetOpTimeDelay))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmRise
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmDown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmCoolMakeCard
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SendCardToPretargeting
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampOpen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampClose
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ReturnCard
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingToAccessory
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresRise
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresDown
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampOpen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampClose
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CuttingPlatformWork
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolRise
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolDown
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_AutoMakeCard
</UL>

<P><STRONG><a name="[c7]"></a>Set_Default_Value</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eeprom_par.o(i.Set_Default_Value))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[86]"></a>StartChildOp</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, opctrl.o(i.StartChildOp))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageDown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmCoolMakeCard
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckMove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckCardCarMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SendCardToPretargeting
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ScramProcess
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ReturnCard
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetModule
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClamp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingUp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingToAccessory
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_GotoLoadingPlatform
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CuttingPlatformWork
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampOpen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampClose
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampCardCarMove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_BlankCardBoxUp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_AutoMakeCard
</UL>

<P><STRONG><a name="[bd]"></a>StartOp</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, opctrl.o(i.StartOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = StartOp
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOpByMode
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd
</UL>

<P><STRONG><a name="[ca]"></a>StartOpByMode</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, opctrl.o(i.StartOpByMode))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[da]"></a>StepCtrlMachine</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, process.o(i.StepCtrlMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = StepCtrlMachine &rArr; Op_SuckMove &rArr; sm_run_abs &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageReset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageDown
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmRise
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmDown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmCoolMakeCard
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckVacuumCupOpen
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckVacuumCupClose
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckMove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckCardCarMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SendCardToPretargeting
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ScramProcess
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampOpen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampClose
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ReturnCard
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuck
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetModule
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClamp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetBlankCardBox
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingVacuumCupOpen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingVacuumCupClose
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingUp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingToAccessory
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingReset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresRise
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresDown
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_OpeningPressure
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_OpenGasSwitch
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampOpen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampClose
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_GotoLoadingPlatform
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CuttingPlatformWork
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolRise
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolDown
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClosingPressure
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CloseGasSwitch
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampOpen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampClose
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampCardCarMove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_BlankCardBoxUp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_AutoMakeCard
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 1210 bytes, Stack size 32 bytes, stepmotor.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_pul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 1210 bytes, Stack size 32 bytes, stepmotor.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_pul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[129]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[e7]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[df]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCapture1))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCapture2))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCapture3))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCapture4))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[121]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[122]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[123]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[124]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[125]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[126]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[127]"></a>TIM_OC4Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[128]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[e0]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 580 bytes, Stack size 8 bytes, serial.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART4_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 568 bytes, Stack size 8 bytes, serial.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[12e]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[116]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ea]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_msg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[eb]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USBWakeUp_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBWakeUp_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsageFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[154]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[54]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_cmd_execution
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToBootload
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToApp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToAddress
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_message
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[f2]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[155]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[80]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_cmd_execution
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToAddress
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_message
</UL>

<P><STRONG><a name="[156]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[157]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[158]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[fb]"></a>check_time_delay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, driver.o(i.check_time_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_cmd_execution
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_serial
</UL>

<P><STRONG><a name="[115]"></a>checksum</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(i.checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
</UL>

<P><STRONG><a name="[c3]"></a>cmd_get_all_info</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, bsp_command.o(i.cmd_get_all_info))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[c2]"></a>cmd_get_firmware</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, bsp_command.o(i.cmd_get_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cmd_get_firmware
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[ce]"></a>cmd_get_mcu_data</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, command.o(i.cmd_get_mcu_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cmd_get_mcu_data &rArr; sm_get_abs
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_get_abs
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUserCmd
</UL>

<P><STRONG><a name="[c8]"></a>cmd_get_op_info</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, bsp_command.o(i.cmd_get_op_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_get_op_info
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[f7]"></a>comm_cmd_execution</STRONG> (Thumb, 678 bytes, Stack size 24 bytes, communicate.o(i.comm_cmd_execution))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = comm_cmd_execution &rArr; ethernet_send_msg &rArr; make_udp_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_send_msg
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_send_msg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_time_delay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackageMsg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DistrubDataToGroup
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPackageValid
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, my_fun.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>delay_us</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, my_fun.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
</UL>

<P><STRONG><a name="[95]"></a>dm_ctrl_one</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, driver.o(i.dm_ctrl_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dm_ctrl_one
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAllSignal
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmRise
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmDown
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckVacuumCupOpen
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckVacuumCupClose
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SendCardToPretargeting
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampOpen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampClose
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ReturnCard
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingVacuumCupOpen
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingVacuumCupClose
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresRise
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresDown
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_OpeningPressure
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_OpenGasSwitch
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampOpen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampClose
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolRise
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolDown
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClosingPressure
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CloseGasSwitch
</UL>

<P><STRONG><a name="[fc]"></a>enc28j60Init</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[102]"></a>enc28j60PacketReceive</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60PacketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = enc28j60PacketReceive &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ethernet
</UL>

<P><STRONG><a name="[106]"></a>enc28j60PacketSend</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60PacketSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_winpcap_ack_with_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
</UL>

<P><STRONG><a name="[100]"></a>enc28j60PhyWrite</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60PhyWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[103]"></a>enc28j60Read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enc28j60Read &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[105]"></a>enc28j60ReadBuffer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60ReadBuffer &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[104]"></a>enc28j60ReadOp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60ReadOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60ReadOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[101]"></a>enc28j60SetBank</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60SetBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[ff]"></a>enc28j60Write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[107]"></a>enc28j60WriteBuffer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60WriteBuffer &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>

<P><STRONG><a name="[fe]"></a>enc28j60WriteOp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60WriteOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[13d]"></a>eth_type_is_arp_and_my_ip</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ip_arp_udp_tcp.o(i.eth_type_is_arp_and_my_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_type_is_arp_and_my_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ethernet
</UL>

<P><STRONG><a name="[13c]"></a>eth_type_is_boardcast</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(i.eth_type_is_boardcast))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ethernet
</UL>

<P><STRONG><a name="[13b]"></a>eth_type_is_my_mac</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ip_arp_udp_tcp.o(i.eth_type_is_my_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_type_is_my_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ethernet
</UL>

<P><STRONG><a name="[f9]"></a>ethernet_send_msg</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ethernet.o(i.ethernet_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ethernet_send_msg &rArr; make_udp_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_winpcap_ack_with_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_cmd_execution
</UL>

<P><STRONG><a name="[10d]"></a>ethernet_tcp</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, ethernet.o(i.ethernet_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ethernet_tcp &rArr; make_tcp_synack_from_syn &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_len_info
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_data_pointer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ethernet
</UL>

<P><STRONG><a name="[112]"></a>ethernet_udp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ethernet.o(i.ethernet_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethernet_udp
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ethernet
</UL>

<P><STRONG><a name="[113]"></a>ethernet_winpcap</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ethernet.o(i.ethernet_winpcap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethernet_winpcap
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ethernet
</UL>

<P><STRONG><a name="[114]"></a>fill_ip_hdr_checksum</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(i.fill_ip_hdr_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fill_ip_hdr_checksum &rArr; checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
</UL>

<P><STRONG><a name="[130]"></a>fpga_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver.o(i.fpga_read))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_all
</UL>

<P><STRONG><a name="[49]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, serial.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[117]"></a>get_board_id</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, driver.o(i.get_board_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_board_id &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>get_parameter</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eeprom_par.o(i.get_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_parameter
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUpdateParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[110]"></a>get_tcp_data_pointer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(i.get_tcp_data_pointer))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_tcp
</UL>

<P><STRONG><a name="[11a]"></a>init_ethernet</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ethernet.o(i.init_ethernet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_ethernet &rArr; enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ip_arp_udp_tcp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>init_ip_arp_udp_tcp</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(i.init_ip_arp_udp_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_ip_arp_udp_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[10f]"></a>init_len_info</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(i.init_len_info))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_tcp
</UL>

<P><STRONG><a name="[11c]"></a>init_parameter</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, eeprom_par.o(i.init_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = init_parameter &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUpdateParameter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultParameter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>init_step_motor</STRONG> (Thumb, 962 bytes, Stack size 40 bytes, stepmotor.o(i.init_step_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_step_motor &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGMCU_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>init_uart</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, serial.o(i.init_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = init_uart &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>input_get_all</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, driver.o(i.input_get_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = input_get_all
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_one
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>input_get_one</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, driver.o(i.input_get_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = input_get_one &rArr; input_get_all
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_all
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageReset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmRise
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmDown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmCoolMakeCard
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SendCardToPretargeting
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampOpen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_RightClampClose
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ReturnCard
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuck
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetBlankCardBox
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingToAccessory
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingReset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresRise
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PresDown
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampOpen
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_LeftClampClose
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CuttingPlatformWork
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolRise
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_CoolDown
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_BlankCardBoxUp
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = main &rArr; ProcessCmd &rArr; ProcessSystemCmd &rArr;  ProcessSystemCmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_all_cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_cmd_execution
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBspConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_step_motor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_serial
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ethernet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepCtrlMachine
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeMachine
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_parameter
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHardware
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_message
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_get_all
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_board_id
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[135]"></a>make_arp_answer_from_request</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(i.make_arp_answer_from_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = make_arp_answer_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ethernet
</UL>

<P><STRONG><a name="[137]"></a>make_echo_reply_from_request</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(i.make_echo_reply_from_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = make_echo_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_ethernet
</UL>

<P><STRONG><a name="[136]"></a>make_eth</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(i.make_eth))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_winpcap_ack_with_data
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
</UL>

<P><STRONG><a name="[138]"></a>make_ip</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(i.make_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = make_ip &rArr; fill_ip_hdr_checksum &rArr; checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
</UL>

<P><STRONG><a name="[111]"></a>make_tcp_ack_from_any</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(i.make_tcp_ack_from_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = make_tcp_ack_from_any &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_tcp
</UL>

<P><STRONG><a name="[10b]"></a>make_tcp_ack_with_data</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(i.make_tcp_ack_with_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = make_tcp_ack_with_data &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_send_msg
</UL>

<P><STRONG><a name="[10e]"></a>make_tcp_synack_from_syn</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(i.make_tcp_synack_from_syn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = make_tcp_synack_from_syn &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_tcp
</UL>

<P><STRONG><a name="[139]"></a>make_tcphead</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, ip_arp_udp_tcp.o(i.make_tcphead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = make_tcphead
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
</UL>

<P><STRONG><a name="[10a]"></a>make_udp_reply_from_request</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ip_arp_udp_tcp.o(i.make_udp_reply_from_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = make_udp_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_send_msg
</UL>

<P><STRONG><a name="[10c]"></a>make_winpcap_ack_with_data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(i.make_winpcap_ack_with_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = make_winpcap_ack_with_data &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_send_msg
</UL>

<P><STRONG><a name="[131]"></a>print_message</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, driver.o(i.print_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = print_message &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>process_all_cmd</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, communicate.o(i.process_all_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = process_all_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_computer
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>process_computer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, communicate.o(i.process_computer))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_all_cmd
</UL>

<P><STRONG><a name="[133]"></a>process_ethernet</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, ethernet.o(i.process_ethernet))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = process_ethernet &rArr; ethernet_tcp &rArr; make_tcp_synack_from_syn &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_my_mac
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_boardcast
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_arp_and_my_ip
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_winpcap
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_udp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_tcp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>process_serial</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, serial.o(i.process_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = process_serial &rArr; check_time_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>save_parameter</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, eeprom_par.o(i.save_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = save_parameter &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUpdateParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_parameter
</UL>

<P><STRONG><a name="[fa]"></a>serial_send_msg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, serial.o(i.serial_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = serial_send_msg &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_cmd_execution
</UL>

<P><STRONG><a name="[c5]"></a>set_parameter</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, eeprom_par.o(i.set_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = set_parameter &rArr; save_parameter &rArr; EE_WriteVariable &rArr; EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>

<P><STRONG><a name="[f6]"></a>sm_get_abs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stepmotor.o(i.sm_get_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_get_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get_mcu_data
</UL>

<P><STRONG><a name="[8d]"></a>sm_run</STRONG> (Thumb, 678 bytes, Stack size 32 bytes, stepmotor.o(i.sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_pul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_dir
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run_abs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_step_motor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageReset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageDown
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuck
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetBlankCardBox
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingUp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingReset
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_BlankCardBoxUp
</UL>

<P><STRONG><a name="[90]"></a>sm_run_abs</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stepmotor.o(i.sm_run_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sm_run_abs &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckMove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckCardCarMove
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampCardCarMove
</UL>

<P><STRONG><a name="[a9]"></a>sm_set_abs_zero</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stepmotor.o(i.sm_set_abs_zero))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuck
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
</UL>

<P><STRONG><a name="[13f]"></a>sm_set_dir</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stepmotor.o(i.sm_set_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_set_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[cf]"></a>sm_set_enable</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stepmotor.o(i.sm_set_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_set_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_step_motor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAllSignal
</UL>

<P><STRONG><a name="[dc]"></a>sm_set_pul</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stepmotor.o(i.sm_set_pul))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_set_pul
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>

<P><STRONG><a name="[8e]"></a>sm_stop</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stepmotor.o(i.sm_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_stop &rArr; sm_set_pul
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_pul
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_step_motor
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAllSignal
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WasteStorageReset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_WarmCoolMakeCard
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckMove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SuckCardCarMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_SendCardToPretargeting
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ScramProcess
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ReturnCard
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuckCardCar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetSuck
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetClampCardCar
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ResetBlankCardBox
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingToAccessory
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_PretargetingReset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_ClampCardCarMove
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Op_BlankCardBoxUp
</UL>

<P><STRONG><a name="[c1]"></a>test_step_motor</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, bsp_command.o(i.test_step_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = test_step_motor &rArr; sm_run &rArr; sm_set_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_stop
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_set_enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSystemCmd
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>EE_FindValidPage</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, eeprom.o(i.EE_FindValidPage))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
</UL>

<P><STRONG><a name="[6c]"></a>EE_Format</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, eeprom.o(i.EE_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EE_Format &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
</UL>

<P><STRONG><a name="[72]"></a>EE_PageTransfer</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, eeprom.o(i.EE_PageTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EE_PageTransfer &rArr; EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
</UL>

<P><STRONG><a name="[71]"></a>EE_VerifyPageFullWriteVariable</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, eeprom.o(i.EE_VerifyPageFullWriteVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EE_VerifyPageFullWriteVariable &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer
</UL>

<P><STRONG><a name="[d8]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d9]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[f1]"></a>_printf_core</STRONG> (Thumb, 988 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[f4]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f3]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
